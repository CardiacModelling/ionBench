[[model]]
author: Myokit CellML 1 API
name: fink_noble_giles_model_2008
# Initial values
cell.V                        = -86.45
iKr_Markov.Cr1                = 0.9786
iKr_Markov.Cr2                = 0.0031
iKr_Markov.Cr3                = 0.0029
iKr_Markov.Or4                = 0.014
iKr_Markov.Ir5                = 0.0014

[Environment]
F =  9.64853414999999950e4 [C/mol]
    in [C/mol]
K_i = 141.0167 [mM]
    in [mM]
K_o = 5.4 [mM]
    in [mM]
R = 8314.472 [mJ/mol/K]
    in [mJ/mol/K]
T = 310 [K]
    in [K]
time = 0 [ms] bind time
    in [ms]
E_K = R * T / F * log(K_o / K_i)
    in [mV]

[IKr]
g_Kr_0 = 0.024 [mS/uF]
    in [mS/uF]
i_Kr = g_Kr_0 * (Environment.T / 35 [K] - 55 / 7) * sqrt(Environment.K_o / 5.4 [mM]) * iKr_Markov.Or4 * (cell.V - Environment.E_K)
    in [A/F]

[cell]
Cm = 0.115 [nF]
    in [nF]
dot(V) = -i_tot
    in [mV]
Vol_c = 0.016404 [nL]
    in [nL]
i_Stim = piecewise(Environment.time - floor(Environment.time / stim_Period) * stim_Period >= 100 [ms] and Environment.time - floor(Environment.time / stim_Period) * stim_Period <= 103 [ms], -12 [A/F], 0 [A/F])
    in [A/F]
i_tot = IKr.i_Kr + i_Stim
    in [A/F]
stim_Period = 1000 [ms]
    in [ms]

[iKr_Markov]
dot(Cr1) = beta_xr1 * Cr2 - alpha_xr1 * Cr1
    in [1]
dot(Cr2) = alpha_xr1 * Cr1 + beta_xr2 * Cr3 - (alpha_xr2 + beta_xr1) * Cr2
    in [1]
dot(Cr3) = alpha_xr2 * Cr2 + beta_xr3 * Or4 - (alpha_xr3 + beta_xr2) * Cr3
    in [1]
dot(Ir5) = alpha_xr4 * Or4 - beta_xr4 * Ir5
    in [1]
dot(Or4) = alpha_xr3 * Cr3 + beta_xr4 * Ir5 - (alpha_xr4 + beta_xr3) * Or4
    in [1]
alpha_xr1 = 1 [mS/uF] * exp(p1 + p2 * cell.V)
    in [mS/uF]
alpha_xr2 = 1 [mS/uF] * exp(p3)
    in [mS/uF]
alpha_xr3 = 1 [mS/uF] * exp(p4 + p5 * cell.V)
    in [mS/uF]
alpha_xr4 = 1 [mS/uF] * exp(p6 + p7 * cell.V) * (5.4 [mM] / Environment.K_o)^0.4
    in [mS/uF]
beta_xr1 = 1 [mS/uF] * exp(p8 + p9 * cell.V)
    in [mS/uF]
beta_xr2 = 1 [mS/uF] * exp(p10)
    in [mS/uF]
beta_xr3 = 1 [mS/uF] * exp(p11 + p12 * cell.V)
    in [mS/uF]
beta_xr4 = 1 [mS/uF] * exp(p13 + p14 * cell.V)
    in [mS/uF]

p1 = -1.579 [1]
    in [1]
p2 = 0.0112 [mV^-1]
    in [mV^-1]
p3 = -3.168 [1]
    in [1]
p4 = -3.816 [1]
    in [1]
p5 = 0.0365 [mV^-1]
    in [mV^-1]
p6 = -0.872 [1]
    in [1]
p7 = 0.0223 [mV^-1]
    in [mV^-1]
p8 = -2.019 [1]
    in [1]
p9 = -0.0603 [mV^-1]
    in [mV^-1]
p10 = -2.514 [1]
    in [1]
p11 = -8.394 [1]
    in [1]
p12 = -0.0399 [mV^-1]
    in [mV^-1]
p13 = -3.182 [1]
    in [1]
p14 = -0.0312 [mV^-1]
    in [mV^-1]

[[protocol]]
# Level  Start    Length   Period   Multiplier
1.0      100.0    0.5      1000.0   0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)

# Run simulation
d = s.run(1000)

# Display the results
var = 'Environment.time'
plt.figure()
plt.plot(d.time(), d[var])
plt.title(var)
plt.show()

